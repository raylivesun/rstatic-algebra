# As both arguments have a default value, we can call sumsquareD without
# providing arguments
sumsquareS2(5)
# As both arguments have a default value, we can call sumsquareD without
# providing arguments
sumsquareS2(2)
# Above the value 5 was assigned to argument a because the argument was matched
# “by position”. If we only wanted to provide a value for b, we need to
# match “by name”.
sumsquareS2(4)
nunique <- function(x) {
length(unique(x))
}
data <- c("a", "b", "a", "c", "b")
nunique(data)
S23 <- function(x, y=10) {
x * y
}
# f2 calls f1
S24 <- function(x, ...) {
S23(x, ...)
}
S23(5)
## [1] 50
S24(5, y=5)
S25 <- matrix(1:15, nrow=5, ncol=3)
S25
# sum values in each row
apply(S25, 1, sum)
## [1] 18 21 24 27 30
# get mean for each column
apply(S25, 2, mean)
# The row Sums and col Sums functions are (fast) shorthand functions
# for apply( , , sum)
rowSums(S25)
colnames(S25) <- c('v1', 'v2', 'v3')
S25 <- data.frame(name=c('Yi', 'Yi', 'Yi', 'Er', 'Er'), m, stringsAsFactors=FALSE)
S25 <- data.frame(name=c('Yi', 'Yi', 'Yi', 'Er', 'Er'), S25, stringsAsFactors=FALSE)
S25$v2[1] <- NA
S25
tapply(S25$v1, S25$name, mean)
##  Er  Yi
## 4.5 2.0
tapply(S25$v1, S25$name, max)
## Er Yi
##  5  3
tapply(S25$v2, S25$name, mean)
##  Er  Yi
## 9.5  NA
tapply(d$v2, d$name, mean, na.rm=TRUE)
##  Er  Yi
## 9.5  NA
tapply(S15$v2, S25$name, mean, na.rm=TRUE)
##  Er  Yi
## 9.5  NA
tapply(S25$v2, S25$name, mean, na.rm=TRUE)
# You can fix that in two ways
aggregate(S25[, c("v1", "v2", "v3")], S25[, "name", drop=FALSE], mean, na.rm=TRUE)
##   name  v1  v2   v3
## 1   Er 4.5 9.5 14.5
## 2   Yi 2.0 7.5 12.0
# or
aggregate(S25[, c("v1", "v2", "v3")], list(S25$name), mean, na.rm=TRUE)
names <- list("Antoinette", "Mary", "Duncan", "Obalaya", "Jojo")
nchar("Jim")
## [1] 3
lapply(names, nchar)
## [1] 4
##
## [[3]]
## [1] 6
##
## [[4]]
## [1] 7
##
## [[5]]
## [1] 4
sapply(names, nchar)
shortname <- function(name) {
if (nchar(name) < 5) {
name <- toupper(name)
return(name)
} else {
name <- substr(name,1,5)
return(name)
}
}
sapply(names, shortname)
for (i in 1:3) {
print('hi')
}
S26 <- 0
for (i in 1:3) {
print(i)
S26 <- S26 + i
}
## [1] 1
## [1] 2
## [1] 3
S26
for (i in 1:3) {
txt <- paste('the square of', i, 'is', i * i)
print(txt)
}
# initialization of output variables
S30 <- vector(length=length(S27))
S27 <- 0
S28 <- 1:6
S29 <- 6:1
# initialization of output variables
S30 <- vector(length=length(S27))
# i goes from 1 to 6 (the length of b)
for (i in 1:length(S28)) {
S27 <- S27 + S27[i]
S29[i] <- S27[i] * S28[i]
}
S27
## [1] 21
S28
for (i in 1:10) {
if (i %in% c(1,3,5,7)) {
next
}
if (i > 8) {
break
}
print(i)
}
i <- 0
while (i < 4) {
print(paste(i, 'and counting ...'))
i <- i + 1
}
set.seed(1)
i <- 0
while(i < 0.5) {
i <- runif(1)
print(i)
}
set.seed(1)
while(TRUE) {
i <- runif(1)
print(i)
if (i > 0.5) {
break
}
}
S30 <- 5
S31 <- 10
if (x == 5) {
y <- 15
}
y
if (S30 == 5) {
S31 <- 15
}
S31
if (S30 > 20) {
S30 <- S30 + 2
} else if (S30 > 5 & S30 < 10) {
S31 <- S31 - 1
} else {
S31 <- S30
}
S31
S32 <- TRUE
if (S32 == TRUE) {
print('hello')
}
if (S32) {
print('hello')
}
S33 <- 1:5
S34 <- vector(length=length(S27))
for (i in 1:length(S27)) {
if (S27[i] > 2) {
S34[i] <- S27[i] / 2
} else {
S34[i] <- S27[i] * 2
}
}
S33 <- 1:5
S34 <- vector(length=length(S33))
for (i in 1:length(S33)) {
if (S27[i] > 2) {
S34[i] <- S33[i] / 2
} else {
S34[i] <- S33[i] * 2
}
}
S33 <- 1:5
S34 <- vector(length=length(S33))
for (i in 1:length(S33)) {
if (S33[i] > 2) {
S34[i] <- S33[i] / 2
} else {
S34[i] <- S33[i] * 2
}
}
S34
# Get some example data on student’s performance in different subjects. Note how
# you can read a text on a web server (http address).
S35 <- read.csv('https://stats.idre.ucla.edu/stat/data/hsb2.csv')
S35 <- S35[1:3, c(1:2, 8:9)]
S35
S36 <- c("write", "math")
S37 <- reshape(d, varying=wvars, v.names="score", direction = "long")
S37
S37 <- reshape(S36, varying=wvars, v.names="score", direction = "long")
S37 <- reshape(S35, varying=wvars, v.names="score", direction = "long")
S37 <- reshape(S35, varying=S36, v.names="score", direction = "long")
S37
S38 <- reshape(S35, varying=S36, v.names="score", times=wvars, timevar = "subject", direction = "long")
S38 <- reshape(S35, varying=S36, v.names="score", times=S36, timevar = "subject", direction = "long")
S38
rownames(S27) <- NULL
S27
rownames(S37) <- NULL
S37
S39 <- reshape(S37, idvar=c("id", "female"), timevar = "subject", direction = "wide")
S39
S39 <- reshape(S27, idvar=c("id", "female"), timevar = "subject", direction = "wide")
S39 <- reshape(S38, idvar=c("id", "female"), timevar = "subject", direction = "wide")
S39
S40 <- colnames(S39)
S40 <- gsub("score.", "", S40)
colnames(S39) <- S40
S40
S41 <- S37[, 1:3]
# random sample of 100 records)
set.seed(1)
S42 <- S37[sample(nrow(S37), 100), c(1, 7:10)]
S41 <- S35[, 1:3]
# random sample of 100 records)
set.seed(1)
S42 <- S35[sample(nrow(S35), 100), c(1, 7:10)]
# Get some example data on student’s performance in different subjects. Note how
# you can read a text on a web server (http address).
S35 <- read.csv('https://stats.idre.ucla.edu/stat/data/hsb2.csv')
S36 <- S35[1:3, c(1:2, 8:9)]
S36
S41 <- S35[, 1:3]
# random sample of 100 records)
set.seed(1)
S42 <- S35[sample(nrow(S35), 100), c(1, 7:10)]
dim(S41)
## [1] 200   3
head(S41)
##    id female race
## 1  70      0    4
## 2 121      1    4
## 3  86      0    4
## 4 141      0    4
## 5 172      0    4
## 6 113      0    4
table(S41$female)
##
##   0   1
##  91 109
table(S41$race)
##
##
##   1   2   3   4
dim(S41)
## [1] 100   5
head(S42)
S43 <- merge(S41, S42, by='id')
head(S43)
# Always check the dimensions of the result
dim(S43)
S44 <- merge(S43, b, by='id', all.x=TRUE)
S44 <- merge(S41, S42, by='id', all.x=TRUE)
dim(S44)
## [1] 200   7
head(S44)
merge(S41[1:3,], S42[1:3, ], by='id')
## [1] id      female  race    read    write   math    science
## <0 rows> (or 0-length row.names)
merge(S41[1:3,], S42[1:3, ], by='id', all.x=T)
##    id female race read write math science
## 1  70      0    4   NA    NA   NA      NA
## 2  86      0    4   NA    NA   NA      NA
## 3 121      1    4   NA    NA   NA      NA
merge(S41[1:3,], S42[1:3, ], by='id', all.y=T)
##    id female race read write math science
## 1  91     NA   NA   50    49   56      47
## 2 107     NA   NA   47    39   47      42
## 3 156     NA   NA   50    59   53      61
merge(S41[1:3,], S42[1:3, ], by='id', all=T)
tapply(S44$read, S44$female, mean, na.rm=TRUE)
##        0        1
## 53.43902 52.20339
tapply(S44$read, S44$race, mean, na.rm=TRUE)
# sort is straightforward:
S45 <- sample(10)
S45
##  [1] 10  8  2  5  4  7  6  9  3  1
sort(S45)
# Now consider order:
S46 <- order(S45)
S46
##  [1] 10  3  9  5  4  7  6  2  8  1
S45[i]
set.seed(0)
S47 <- S41[sample(nrow(S41), 10), ]
S47
S48 <- order(S47$id)
S49 <- S47[S48, ]
S49
S50 <- order(S48$race, S48$female, S48$id)
S50 <- order(S47$race, S47$female, S47$id)
S50[S49, ]
S50[S48, ]
S50[S49, ]
S50[S46, ]
S47[S50, ]
data(cars)
head(cars)
#As we only have two variables, we can simply do
plot(cars)
# But to be more explicit:
plot(cars[,1], cars[,2])
# And now to embellish, add axes labels.
plot(cars[,1], cars[,2], xlab='Speed of car (miles/hr)', ylab='Stopping distance (feet)')
# Different symbols (ch is the symbol type, sex is the size).
plot(cars, xlab='Speed of car (miles/hr)', ylab='Stopping distances (feet)', pch=20, cex=2, col='red')
plot(cars, xlab='Speed', ylab='Time', pch=20, cex=2, col='red', xlim = c(0,25), las=1)
plot(cars, xlab='Speed', ylab='', pch=20, cex=2, col='red', xlim = c(0,27), ylim=c(0,125), axes=FALSE, xaxs="i", yaxs="i")
axis(1)
axis(2, las=1)
text(5, 100, 'Cars!', cex=2, col='blue')
par(xpd=NA)
text(-1, 133, 'Distance\n(feet)')
# We can change the symbols using another variable. Let’s say we have three car
# brands and that we want to vary the symbol type, color, and size by brand
# (typically one of these changes should suffice to distinguish them!).
set.seed(0)
brands <- c('Buick', 'Chevrolet', 'Ford')
b <- sample(brands, nrow(cars), replace=TRUE)
i <- match(b, brands)
plot(cars, pch=i+1, cex=i, col=rainbow(3)[i])
j <- 1:length(brands)
legend(5, 120, brands, pch=(j+1), pt.cex=j, col=rainbow(3), cex=1.5)
# As you have seen above, plot takes many variables. Several other parameters
# influencing your plot, can be set with par. See ?par for details. Here I use
# it to create 4 subplots (mfrow=c(2,2) with non-default margins (mar=c(2,3,1.5,1.5)).
par(mfrow=c(2,2), mar=c(2,3,1.5,1.5))
for (i in 1:4) {
plot(sample(cars[,1]), sample(cars[,2]), xlab='', ylab='', las=1)
}
head(InsectSprays)
hist(InsectSprays[,1])
S51 <- aggregate(InsectSprays[,1,drop=F], InsectSprays[,2,drop=F], sum)
barplot(S51[,2], names=S51[,1], horiz=T, las=1)
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
data(iris)
str(iris)
plot(iris$Sepal.Length, type = 'l')
# marks
plot(iris$Sepal.Length, type = 'p')
# points local view parent
plot(iris$Sepal.Length, type = 'o')
# brows type local view parents
plot(iris$Sepal.Length, iris$Sepal.Width, type = 'p')
plot(iris$Petal.Length, iris$Petal.Width, main = "Edgar Anderson's Iris Data",
xlab = "Petal Length", ylab = "Petal Width")
plot(iris$Sepal.Length, type = 'l', lty = 2, lwd = 2,
main = "Edgar Anderson's Iris Data", xlab = "Petal Length", ylab = "Petal Width")
plot(iris$Petal.Length, iris$Petal.Width, pch = 8,
main = "Edgar Anderson's Iris Data", xlab = "Petal Length", ylab = "Petal Width")
plot(iris$Petal.Length, iris$Petal.Width, pch = 8, col = 'red',
main = "Edgar Anderson's Iris Data", xlab = "Petal Length", ylab = "Petal Width")
mycolor <- c("red","green3","blue")[as.factor(iris$Species)]
plot(iris$Petal.Length, iris$Petal.Width, pch = 8, col = mycolor,
main = "Edgar Anderson's Iris Data", xlab = "Petal Length", ylab = "Petal Width")
plot(iris$Petal.Length, iris$Petal.Width, pch = 8, col = mycolor,
main = "Edgar Anderson's Iris Data", xlab = "Petal Length", ylab = "Petal Width",
xlim = c(0,10), ylim= c(0,10))
plot(iris$Petal.Length, iris$Petal.Width, pch = 8, col = mycolor,
main = "Edgar Anderson's Iris Data", xlab = "Petal Length", ylab = "Petal Width",
xlim = c(0,10), ylim= c(0,10), axes = FALSE)
axis(1, at = 1:10, lab = c(1:10))
axis(2, at = 1:10, lab = c(1:10))
plot(iris$Petal.Length, iris$Petal.Width, pch = 8, col = mycolor,
main = "Edgar Anderson's Iris Data", xlab = "Petal Length", ylab = "Petal Width",
xlim = c(0,10), ylim= c(0,10))
legend('topright', legend = unique(iris$Species), col = c("red","green3","blue"), pch = 8)
loc <- list()
loc$x <- 2.75
loc$y <- 4.94
plot(iris$Petal.Length, iris$Petal.Width, pch = 8, col = mycolor,
main = "Edgar Anderson's Iris Data", xlab = "Petal Length", ylab = "Petal Width",
xlim = c(0,10), ylim= c(0,10))
legend('topright', legend = unique(iris$Species), col = c("red","green3","blue"),
pch = 8, bty = 'n')
text(loc$x, loc$y, labels = "Hello! this is a Scatter Plot")
par(mfrow=c(2,2))
boxplot(iris$Sepal.Length~iris$Species, main = "Boxplot of Sepal Length",
xlab = "Species", ylab = "Sepal Length", col = c("red","green3","blue"),
cex.lab = 1.25)
hist(iris$Sepal.Length, main = "Histogram of Sepal Length",
xlab = "Sepal Length", ylab = "Frequency", col = c("grey"), cex.lab = 1.25)
plot(iris$Sepal.Length, type = 'l', lty = 2, lwd = 2, col = 'red',
main = "Variation with of Petal Width and Petal Length",
xlab = "Petal Length", ylab = "Petal Width", cex.lab = 1.25)
plot(iris$Petal.Length, iris$Petal.Width, pch = 8, col = mycolor,
main = "Scatter plot of Petal Width and Petal Length",
xlab = "Petal Length", ylab = "Petal Width", cex.lab = 1.25)
pdf("theplot.pdf")
boxplot(iris$Sepal.Length~Species, main = "Boxplot of Sepal Length",
xlab = "Species", ylab = "Sepal Length", col = c("red","green3","blue"))
dev.off()
pdf("theplot.pdf")
boxplot(iris$Sepal.Length~Species, main = "Boxplot of Sepal Length",
xlab = "Species", ylab = "Sepal Length", col = c("red","green3","blue"))
pdf("theplot.pdf")
dev.off()
png(filename = "myplot.png", width = 200, height = 300, units = "cm", res = 300)
boxplot(iris$Sepal.Length~iris$Species, main = "Boxplot of Sepal Length",
xlab = "Species", ylab = "Sepal Length", col = c("red","green3","blue"))
dev.off()
boxplot(iris$Sepal.Length~iris$Species, main = "Boxplot of Sepal Length",
xlab = "Species", ylab = "Sepal Length", col = c("red","green3","blue"))
dev.off()
head(cars)
##   speed dist
## 1     4    2
## 2     4   10
## 3     7    4
## 4     7   22
## 5     8   16
## 6     9   10
m <- lm(dist ~ speed, data=cars)
##   speed dist
## 1     4    2
## 2     4   10
## 3     7    4
## 4     7   22
## 5     8   16
## 6     9   10
S52 <- lm(dist ~ speed, data=cars)
S52
summary(S52)
## Coefficients:
##             Estimate Std. Error t value Pr(>|t|)
## (Intercept) -17.5791     6.7584  -2.601   0.0123 *
## speed         3.9324     0.4155   9.464 1.49e-12 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
##
## Residual standard error: 15.38 on 48 degrees of freedom
## Multiple R-squared:  0.6511, Adjusted R-squared:  0.6438
## F-statistic: 89.57 on 1 and 48 DF,  p-value: 1.49e-12
anova(S52)
## Analysis of Variance Table
##
## Response: dist
##           Df Sum Sq Mean Sq F value   Pr(>F)
## speed      1  21186 21185.5  89.567 1.49e-12 ***
## Residuals 48  11354   236.5
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
residuals(S52)[1:10]
plot(cars, col='blue', pch='*', cex=2)
abline(m, col='red', lwd=2)
S53 <- predict(m, data.frame(speed=1:30))
S53
##          1          2          3          4          5          6          7
## -13.646686  -9.714277  -5.781869  -1.849460   2.082949   6.015358   9.947766
##          8          9         10         11         12         13         14
##  13.880175  17.812584  21.744993  25.677401  29.609810  33.542219  37.474628
##         15         16         17         18         19         20         21
##  41.407036  45.339445  49.271854  53.204263  57.136672  61.069080  65.001489
##         22         23         24         25         26         27         28
##  68.933898  72.866307  76.798715  80.731124  84.663533  88.595942  92.528350
##         29         30
##  96.460759 100.393168
plot(1:30, p, xlab='speed', ylab='distance', type='l', lwd=2)
##          1          2          3          4          5          6          7
## -13.646686  -9.714277  -5.781869  -1.849460   2.082949   6.015358   9.947766
##          8          9         10         11         12         13         14
##  13.880175  17.812584  21.744993  25.677401  29.609810  33.542219  37.474628
##         15         16         17         18         19         20         21
##  41.407036  45.339445  49.271854  53.204263  57.136672  61.069080  65.001489
##         22         23         24         25         26         27         28
##  68.933898  72.866307  76.798715  80.731124  84.663533  88.595942  92.528350
##         29         30
##  96.460759 100.393168
plot(1:30, S53, xlab='speed', ylab='distance', type='l', lwd=2)
points(cars)
cars$above40 <- cars$dist > 40
S54 <- glm(above40 ~ speed, data=cars, family='binomial')
S54
S56 <- predict(mlog, data.frame(speed=1:30), type='response')
S55 <- predict(S54, data.frame(speed=1:30), type='response')
plot(cars$speed, cars$above40)
S55 <- predict(S54, data.frame(speed=1:30), type='response')
plot(cars$speed, cars$above40)
lines(1:30, S55)
S56 <- 1:30
S57 <- matrix(S56, nrow=10)
S58 <- as.data.frame(S57)
S59 <- apply(S58, 1, mean)
head(S59)
S60 <- S56 |>
matrix(nrow=10) |>
as.data.frame() |>
apply(MARGIN=1, FUN=mean)
head(S60)
S58 |> matrix(nrow=10) |>  as.data.frame() |>  apply(MARGIN=1, FUN=mean) |> head()
head(apply(as.data.frame(matrix(S56, nrow=10)), 1, mean))
S56 <- 1:30
